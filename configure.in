dnl
dnl $Id$
dnl
dnl "Copyright (c) 2003 by Matt Massie and The Regents of the University
dnl  of California.  All rights reserved."
dnl
dnl Permission to use, copy, modify, and distribute this software and its
dnl documentation for any purpose, without fee, and without written agreement is
dnl hereby granted, provided that the above copyright notice and the following
dnl two paragraphs appear in all copies of this software.
dnl 
dnl IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
dnl DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT
dnl OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
dnl CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
dnl 
dnl THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
dnl INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
dnl AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
dnl ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
dnl PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
dnl

AC_REVISION([$Revision$])
AC_INIT(gmond/gmond.c)
AC_CONFIG_AUX_DIR(config)

###############################
# Package info

# On making releases:
#   GANGLIA_MICRO_VERSION += 1;
#   GANGLIA_INTERFACE_AGE += 1;
#   GANGLIA_BINARY_AGE += 1;
# if any functions have been added, set GANGLIA_INTERFACE_AGE to 0.
# if backwards compatibility has been broken,
# set GANGLIA_BINARY_AGE _and_ GANGLIA_INTERFACE_AGE to 0.
GANGLIA_RELEASE_NAME="Kittyhawk"
GANGLIA_MAJOR_VERSION=2
GANGLIA_MINOR_VERSION=6
GANGLIA_MICRO_VERSION=0
GANGLIA_INTERFACE_AGE=0
GANGLIA_BINARY_AGE=0
################################

GANGLIA_VERSION=$GANGLIA_MAJOR_VERSION.$GANGLIA_MINOR_VERSION.$GANGLIA_MICRO_VERSION

AC_SUBST(GANGLIA_RELEASE_NAME)
AC_SUBST(GANGLIA_MAJOR_VERSION)
AC_SUBST(GANGLIA_MINOR_VERSION)
AC_SUBST(GANGLIA_MICRO_VERSION)
AC_SUBST(GANGLIA_VERSION)
AC_SUBST(GANGLIA_INTERFACE_AGE)
AC_SUBST(GANGLIA_BINARY_AGE)

# libtool versioning
LT_RELEASE=$GANGLIA_MAJOR_VERSION.$GANGLIA_MINOR_VERSION
LT_CURRENT=`expr $GANGLIA_MICRO_VERSION - $GANGLIA_INTERFACE_AGE`
LT_REVISION=$GANGLIA_INTERFACE_AGE
LT_AGE=`expr $GANGLIA_BINARY_AGE - $GANGLIA_INTERFACE_AGE`
AC_SUBST(LT_RELEASE)
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)
# Define version stuff
AC_DEFINE_UNQUOTED(GANGLIA_MAJOR_VERSION, $GANGLIA_MAJOR_VERSION, GANGLIA_MAJOR_VERSION)
AC_DEFINE_UNQUOTED(GANGLIA_MINOR_VERSION, $GANGLIA_MINOR_VERSION, GANGLIA_MINOR_VERSION)
AC_DEFINE_UNQUOTED(GANGLIA_MICRO_VERSION, $GANGLIA_MICRO_VERSION, GANGLIA_MICRO_VERSION)
AC_DEFINE_UNQUOTED(GANGLIA_INTERFACE_AGE, $GANGLIA_INTERFACE_AGE, GANGLIA_INTERFACE_AGE)
AC_DEFINE_UNQUOTED(GANGLIA_BINARY_AGE,    $GANGLIA_BINARY_AGE,    GANGLIA_BINARY_AGE)

echo ""
echo "Welcome to.."
echo "     ______                  ___"
echo "    / ____/___ _____  ____ _/ (_)___ _"
echo "   / / __/ __ \`/ __ \/ __ \`/ / / __ \`/"
echo "  / /_/ / /_/ / / / / /_/ / / / /_/ /"
echo "  \____/\__,_/_/ /_/\__, /_/_/\__,_/"
echo "                   /____/"
echo ""
echo "Copyright (c) 2004 University of California, Berkeley"
echo ""
echo "Version: $GANGLIA_VERSION ($GANGLIA_RELEASE_NAME)"
echo "Library: Release $LT_RELEASE $LT_CURRENT:$LT_REVISION:$LT_AGE"
echo ""

AM_INIT_AUTOMAKE(ganglia, $GANGLIA_VERSION)

########################
AC_CANONICAL_HOST
AM_CONFIG_HEADER(config.h)

dnl Install with /usr are the root by default
AC_PREFIX_DEFAULT(/usr)

dnl The following cpu_vendor_os string goes into config.h.
dnl
AC_DEFINE_UNQUOTED(HOST_OS, "$host_os", HOST_OS)
AC_DEFINE_UNQUOTED(CPU_VENDOR_OS, "$host", CPU_VENDOR_OS)
dnl AC_CYGWIN

dnl ##################################################################
dnl Checks for programs.

AC_PROG_CC
AC_PROG_RANLIB
AM_PROG_LIBTOOL

dnl ##################################################################
dnl Special parameters
dnl

dnl AC_ARG_WITH( gmetad,
dnl [  --with-gmetad           compile and install the Ganglia Meta Daemon],
dnl if test "$withval" = yes; then gmetad=yes; fi)

dnl AM_CONDITIONAL(BUILD_GMETAD, test x$gmetad = xyes)

AC_ARG_ENABLE(debug,
[
  --enable-debug          turn on debugging output and compile options],
[ CFLAGS="$CFLAGS -ggdb"
  AC_DEFINE(DEBUG, 1, DEBUG)])
# Turn off optimizations when debugging.
#[ CFLAGS="$CFLAGS -O2" 
#  AC_DEFINE(DEBUG, 0, DEBUG)])

#AC_ARG_ENABLE(gexec,
#[  --enable-gexec          turn on gexec support (platform-specific) ],
#AC_DEFINE(SUPPORT_GEXEC, 1, SUPPORT_GEXEC), AC_DEFINE(SUPPORT_GEXEC, 0, SUPPORT_GEXEC))

AC_ARG_ENABLE(pedantic,   
[  --enable-pedantic       turn on pedantic mode during compile],     
[ CFLAGS="$CFLAGS --pedantic" ],)

AC_ARG_ENABLE(memcheck,
[  --enable-memcheck       turn on memory checking during compile
                           note: requires mpatrol from
                           http://www.cbmamiga.demon.co.uk/mpatrol/],
[ enable_memcheck="yes" ])

dnl ##################################################################
dnl Checks for libraries.
dnl The order of these tests is the *reverse* order of the libraries in
dnl the LIBS variable that is constructed: each new one gets prepended,
dnl not appended.
dnl
AC_CHECK_LIB(pthread, pthread_create)
if test "$ac_cv_lib_pthread_pthread_create" = yes ; then
   CFLAGS="$CFLAGS -D_REENTRANT"
else
   AC_CHECK_LIB(pthreads, pthread_create)
   if test "$ac_cv_lib_pthreads_pthread_create" = yes ; then
      CFLAGS="$CFLAGS -D_REENTRANT"
   fi
fi

AC_CHECK_LIB(c, getaddrinfo)
AC_CHECK_LIB(c, freeaddrinfo)
AC_CHECK_LIB(nsl, t_open)
AC_CHECK_LIB(nsl, inet_addr)
AC_CHECK_LIB(nsl, gethostbyaddr_r)
AC_CHECK_LIB(socket, socket)
AC_CHECK_LIB(resolv, inet_aton)


AC_CHECK_LIB(expat, XML_ParserCreate, EXPAT_FOUND="yes", EXPAT_FOUND="no")

if test "$EXPAT_FOUND" != yes; then
echo
echo "The expat library could not be found.  Expat can be downloaded from"
echo
echo "               http://expat.sourceforge.net/"
echo
echo "Please download and install the latest version of expat before continuing."
echo
echo "+======================================================================+"
echo "| If this library is in a non-standard location (such as your home     |"
echo "| directory).  You can add the path to the headers and libraries using |"
echo "| the CFLAGS, CPPFLAGS and LDFLAGS environment variables.  For example |"
echo "|                                                                      |"
echo "| % CFLAGS=\"-I/home/me/pkg/include\" \\                                  |"
echo "|   CPPFLAGS=\"-I/home/me/pkg/include\" \\                                |"
echo "|   LDFLAGS=\"-L/home/me/pkg/lib\" \\                                     |"
echo "|   ./configure ...                                                    |"
echo "+======================================================================+"
echo
echo "Note: This library will be statically linked and doesn't need to be installed"
echo "      anywhere except the machine you are compiling ganglia on."
exit;
fi

AC_CHECK_LIB(rrd, rrd_create, RRDTOOL_FOUND="yes", RRDTOOL_FOUND="no")

if test "$RRDTOOL_FOUND" != yes; then
echo
echo "The Round-Robin Database Tool (rrdtool) cound not be found.  Rrdtool can be found at"
echo
echo "             http://www.rrdtool.com/"
echo
echo "Please download and install the latest version of RRDtool."
echo
echo "NOTE: Cygwin users will want to add '-DALL_STATIC -g' to your CFLAGS "
echo
echo "+======================================================================+"
echo "| If this library is in a non-standard location (such as your home     |"
echo "| directory).  You can add the path to the headers and libraries using |"
echo "| the CFLAGS, CPPFLAGS and LDFLAGS environment variables.  For example |"
echo "|                                                                      |"
echo "| % CFLAGS=\"-I/home/me/pkg/include\" \\                                  |"
echo "|   CPPFLAGS=\"-I/home/me/pkg/include\" \\                                |"
echo "|   LDFLAGS=\"-L/home/me/pkg/lib\" \\                                     |"
echo "|   ./configure ...                                                    |"
echo "+======================================================================+"
echo
echo "Note: This library will be statically linked and doesn't need to be installed"
echo "      anywhere except the machine you are compiling ganglia on."
exit;
fi

AC_CHECK_LIB(z, zlibVersion, ZLIB_FOUND="yes", ZLIB_FOUND="no")

if test "$ZLIB_FOUND" != yes; then
echo
echo "The zlib library could not be found.  Zlib can be downloaded from"
echo
echo "                     http://www.gzip.org/zlib/"
echo
echo "Please download and install the latest version of zlib before continuing."
echo
echo "+======================================================================+"
echo "| If this library is in a non-standard location (such as your home     |"
echo "| directory).  You can add the path to the headers and libraries using |"
echo "| the CFLAGS, CPPFLAGS and LDFLAGS environment variables.  For example |"
echo "|                                                                      |"
echo "| % CFLAGS=\"-I/home/me/pkg/include\" \\                                  |"
echo "|   CPPFLAGS=\"-I/home/me/pkg/include\" \\                                |"
echo "|   LDFLAGS=\"-L/home/me/pkg/lib\" \\                                     |"
echo "|   ./configure ...                                                    |"
echo "+======================================================================+"
exit;
fi

AC_CHECK_LIB(socket, socket)
AC_CHECK_LIB(nsl, inet_addr)
AC_CHECK_LIB(nsl, gethostbyaddr_r)
AC_CHECK_LIB(resolv, inet_aton)
AC_CHECK_LIB(kstat, kstat_open)
AC_CHECK_LIB(kvm, kvm_open)
AC_CHECK_LIB(odm, odm_initialize)
AC_CHECK_LIB(cfg, _system_configuration)
AC_CHECK_LIB(pmapi, pm_cycles)
AC_CHECK_LIB(dl, dlopen)
dnl AC_CHECK_LIB(crypto, RSA_sign)
dnl if test "$ac_cv_lib_crypto_RSA_sign" = no; then
dnl    echo "$PACKAGE $VERSION requires IPv4 OpenSSL."
dnl    echo "See http://www.openssl.org/."
dnl    exit;
dnl fi


dnl ##################################################################
dnl Checks for header files.
dnl

dnl Check for stdlib.h stdarg.h string.h float.h
AC_HEADER_STDC

AC_CHECK_HEADERS(stdarg.h syslog.h pthread.h fcntl.h signal.h sys/time.h sys/types.h sys/stat.h sys/socket.h sys/ioctl.h netinet/in.h arpa/inet.h net/if.h netinet/tcp.h unistd.h stropts.h sys/sockio.h ctype.h errno.h netdb.h stdio.h sys/uio.h sys/wait.h sys/un.h sys/select.h sys/filio.h getopt.h net/if_dl.h net/raw.h poll.h)
AC_CHECK_HEADERS(inttypes.h limits.h sys/param.h sys/mount.h sys/vfs.h sys/statfs.h sys/statvfs.h)

dnl ##################################################################
dnl Checks for typedefs.
dnl
dnl AC_TYPE_SIZE_T
AC_HEADER_TIME
dnl AC_SEARCH_TYPE is a custom macro in acinclude.m4
AC_SEARCH_TYPE(uchar_t,   unsigned char)
AC_SEARCH_TYPE(int8_t,    signed char)
AC_SEARCH_TYPE(uint8_t,   unsigned char)
AC_SEARCH_TYPE(int16_t,   signed short)
AC_SEARCH_TYPE(uint16_t,  unsigned short)
AC_SEARCH_TYPE(int32_t,   signed int)
AC_SEARCH_TYPE(uint32_t,  unsigned int)
AC_SEARCH_TYPE(size_t,    unsigned int)
AC_SEARCH_TYPE(ssize_t,   signed int)
AC_SEARCH_TYPE(socklen_t, unsigned int)

dnl AC_CHECK_SIZEOF(char)
dnl AC_CHECK_SIZEOF(short)
dnl AC_CHECK_SIZEOF(int)
dnl AC_CHECK_SIZEOF(long)
dnl AC_CHECK_SIZEOF(void *)
dnl
dnl The SA_FAMILY_T in the following is #defined later, as its definition
dnl depends on whether socket address structures have a length field or not.
dnl
AC_UNP_CHECK_TYPE(sa_family_t, SA_FAMILY_T)


dnl ##################################################################
dnl Check for structure definitions.
dnl   


dnl ##################################################################
dnl Check if sockaddr{} has sa_len member.
dnl
AC_CACHE_CHECK(if sockaddr{} has sa_len member, ac_cv_sockaddr_has_sa_len,
        AC_TRY_COMPILE([
#               include <sys/types.h>
#               include <sys/socket.h>],
                [unsigned int i = sizeof(((struct sockaddr *)0)->sa_len)],
        ac_cv_sockaddr_has_sa_len=yes,
        ac_cv_sockaddr_has_sa_len=no))
if test $ac_cv_sockaddr_has_sa_len = yes ; then
        AC_DEFINE(HAVE_SOCKADDR_SA_LEN, 1, [We have a len attr in sockaddr])
fi

dnl Now we can complete the definition for sa_family_t, if needed.
dnl The size of this datatype depends whether socket address structures
dnl have a length field or not.
dnl
if test $ac_cv_type_sa_family_t = no ; then
   if test $ac_cv_sockaddr_has_sa_len = yes ; then
      AC_DEFINE(SA_FAMILY_T, uint8_t, [sizeof sa_family_t is uint8_t])
   else
      AC_DEFINE(SA_FAMILY_T, uint16_t, [sizeof sa_family_t is uint16_t])
   fi
fi

dnl Check if msghdr{} has msg_control member.
dnl
AC_CACHE_CHECK(if msghdr{} has msg_control member, ac_cv_msghdr_has_msg_control,
        AC_TRY_COMPILE([
#               include <sys/types.h>
#               include <sys/socket.h>],
                [unsigned int i = sizeof(((struct msghdr *)0)->msg_control)],
        ac_cv_msghdr_has_msg_control=yes,
        ac_cv_msghdr_has_msg_control=no))
if test $ac_cv_msghdr_has_msg_control = yes ; then
        AC_DEFINE(HAVE_MSGHDR_MSG_CONTROL, 1, [msghdr has msg_control member])
fi

AC_CACHE_CHECK(for timespec{}, ac_cv_have_timespec_struct,
        AC_EGREP_HEADER(timespec, time.h,
                ac_cv_have_timespec_struct=yes,
                ac_cv_have_timespec_struct=no))
if test $ac_cv_have_timespec_struct = yes ; then
        AC_DEFINE(HAVE_TIMESPEC_STRUCT, 1, [we have timespec struct])
fi


AC_CACHE_CHECK(for addrinfo{}, ac_cv_have_addrinfo_struct,
        AC_EGREP_HEADER(addrinfo, netdb.h,
                ac_cv_have_addrinfo_struct=yes,
                ac_cv_have_addrinfo_struct=no))
if test $ac_cv_have_addrinfo_struct = yes ; then
        AC_DEFINE(HAVE_ADDRINFO_STRUCT, 1, [we have addrinfo struct])
fi

AC_CACHE_CHECK(for if_nameindex{}, ac_cv_have_if_nameindex_struct,
        AC_EGREP_HEADER(if_nameindex, net/if.h,
                ac_cv_have_if_nameindex_struct=yes,
                ac_cv_have_if_nameindex_struct=no))
if test $ac_cv_have_if_nameindex_struct = yes ; then
        AC_DEFINE(HAVE_IF_NAMEINDEX_STRUCT, 1, [we have if_nameinded])
fi

AC_CACHE_CHECK(for in_pktinfo{}, ac_cv_have_in_pktinfo_struct,
       AC_EGREP_HEADER(in_pktinfo, netinet/in.h,
                ac_cv_have_in_pktinfo_struct=yes,
                ac_cv_have_in_pktinfo_struct=no))
if test $ac_cv_have_in_pktinfo_struct = yes; then
       AC_DEFINE(HAVE_IN_PKTINFO_STRUCT, 1, [we have in_pktinfo])
fi


dnl ##################################################################
dnl Check the compiler characteristics
dnl
dnl Don't need this now that all data is send in XDR
dnl AC_C_BIGENDIAN

dnl ##################################################################
dnl Checks for library functions.
dnl
dnl AC_FUNC_MEMCMP
AC_CHECK_FUNCS(getopt_long inet_ntop)
AC_CHECK_FUNCS(bzero)
AC_CHECK_FUNCS(getaddrinfo)
AC_CHECK_FUNCS(freeaddrinfo)
AC_CHECK_FUNCS(gethostname)
AC_CHECK_FUNCS(gethostbyname2)
AC_CHECK_FUNCS(gethostbyname_r)
AC_CHECK_FUNCS(getnameinfo)
AC_CHECK_FUNCS(hstrerror)
AC_CHECK_FUNCS(if_nametoindex)
AC_CHECK_FUNCS(inet_aton)
AC_CHECK_FUNCS(inet_pton)
AC_CHECK_FUNCS(isfdtype)
AC_CHECK_FUNCS(poll)
AC_CHECK_FUNCS(pselect)
AC_CHECK_FUNCS(snprintf)
AC_CHECK_FUNCS(sockatmark)
AC_CHECK_FUNCS(vsnprintf)
AC_CHECK_FUNCS(strdup)


dnl ##################################################################
dnl Check for function prototypes in headers.
dnl
AC_CHECK_FUNC_PROTO(getaddrinfo, netdb.h)
AC_CHECK_FUNC_PROTO(freeaddrinfo, netdb.h)
AC_CHECK_FUNC_PROTO(getnameinfo, netdb.h)
AC_CHECK_FUNC_PROTO(gethostname, unistd.h)
AC_CHECK_FUNC_PROTO(getrusage, sys/resource.h)
AC_CHECK_FUNC_PROTO(hstrerror, netdb.h)
AC_CHECK_FUNC_PROTO(if_nametoindex, net/if.h)
AC_CHECK_FUNC_PROTO(inet_aton, arpa/inet.h)
AC_CHECK_FUNC_PROTO(inet_pton, arpa/inet.h)
AC_CHECK_FUNC_PROTO(isfdtype, sys/stat.h)
AC_CHECK_FUNC_PROTO(pselect, sys/select.h)
AC_CHECK_FUNC_PROTO(snprintf, stdio.h)
AC_CHECK_FUNC_PROTO(vsnprintf, stdarg.h)
AC_CHECK_FUNC_PROTO(sockatmark, sys/socket.h)


dnl AC_CHECK_FUNC(getopt_long)
dnl AC_CHECK_FUNC(pthread_rwlock_rdlock,
dnl   [AC_DEFINE(HAVE_PTHREAD_RWLOCK, 1)])

dnl ##################################################################
dnl Check for system services.


dnl Let's see if the system really supports IPv4.
dnl
AC_MSG_CHECKING(for IPv4 support)
AC_CACHE_VAL(ac_cv_ipv4,
	AC_TRY_RUN([
#	include <sys/types.h>
#	include <sys/socket.h>
#	include <netinet/in.h>
	/* Make sure the definitions for AF_INET and struct sockaddr_in
	 * are defined, and that we can actually create an IPv4 TCP socket.
	 */
	main()
	{
		int fd;
		struct sockaddr_in foo;
		fd = socket(AF_INET, SOCK_STREAM, 0);
		exit(fd >= 0 ? 0 : 1);
	}],
	ac_cv_ipv4=yes,
	ac_cv_ipv4=no,
	ac_cv_ipv4=no))
AC_MSG_RESULT($ac_cv_ipv4)
if test $ac_cv_ipv4 = yes ; then
	AC_DEFINE(IPV4, 1, [We have IP version 4])
	AC_DEFINE(IPv4, 1, [We have IP version 4])
fi

dnl Let's see if the system really supports IPv6.
dnl
AC_MSG_CHECKING(for IPv6 support)
AC_CACHE_VAL(ac_cv_ipv6,
	AC_TRY_RUN([
#	include <sys/types.h>
#	include <sys/socket.h>
#	include <netinet/in.h>
	/* Make sure the definitions for AF_INET6 and struct sockaddr_in6
	 * are defined, and that we can actually create an IPv6 TCP socket.
	 */
	main()
	{
		int fd;
		struct sockaddr_in6 foo;
		fd = socket(AF_INET6, SOCK_STREAM, 0);
		exit(fd >= 0 ? 0 : 1);
	}],
	ac_cv_ipv6=yes,
	ac_cv_ipv6=no,
	ac_cv_ipv6=no))
AC_MSG_RESULT($ac_cv_ipv6)
if test $ac_cv_ipv6 = yes ; then
	AC_DEFINE(IPV6, 1, [We have IP version 6])
	AC_DEFINE(IPv6, 1, [We have IP version 6])
fi

dnl Let's see if the system really supports Unix domain sockets.
dnl
AC_MSG_CHECKING(for Unix domain sockets)
AC_CACHE_VAL(ac_cv_unixdomain,
	AC_TRY_RUN([
#	include <sys/types.h>
#	include <sys/socket.h>
#	include <sys/un.h>
	/* Make sure the definitions for AF_UNIX and struct sockaddr_un
	 * are defined, and that we can actually create an IPv4 TCP socket.
	 */
	main()
	{
		int fd;
		struct sockaddr_un foo;
		fd = socket(AF_UNIX, SOCK_STREAM, 0);
		exit(fd >= 0 ? 0 : 1);
	}],
	ac_cv_unixdomain=yes,
	ac_cv_unixdomain=no,
	ac_cv_unixdomain=no))
AC_MSG_RESULT($ac_cv_unixdomain)
if test $ac_cv_unixdomain = yes ; then
	AC_DEFINE(UNIXDOMAIN, 1, [We have Unix domain sockets])
	AC_DEFINE(UNIXdomain, 1, [We have Unix domain sockets])
fi

dnl Let's see if the system really supports multicasting.
dnl
AC_MSG_CHECKING(for multicast support)
AC_CACHE_VAL(ac_cv_multicast,
	AC_TRY_RUN([
#	include <sys/types.h>
#	include <sys/socket.h>
#	include <netinet/in.h>
	main()
	{
		int fd;
		unsigned char flag = 1;
		struct sockaddr_in foo;
		struct ip_mreq mreq;
		fd = socket(AF_INET, SOCK_DGRAM, 0);
		if (fd < 0) exit(1);
		if (setsockopt(fd, IPPROTO_IP, IP_MULTICAST_LOOP,
			       (void*)&flag, sizeof(flag)) < 0)
			exit(1);
		exit(0);
	}],
	ac_cv_multicast=yes,
	ac_cv_multicast=no,
	ac_cv_multicast=no))
AC_MSG_RESULT($ac_cv_multicast)
if test $ac_cv_multicast = yes ; then
	AC_DEFINE(MCAST, 1, [We have multicast support])
fi

dnl ##################################################################
dnl If the compiler is gcc, enable all warnings.  Main purpose is to
dnl catch any function call where the function has not been prototyped.
dnl
dnl Add "-Wcast-qual again later"...
dnl if test "$ac_cv_prog_gcc" = yes; then
if test "$ac_cv_gcc" = yes; then
   CFLAGS="$CFLAGS -Wall -Wshadow -Wpointer-arith -Wcast-align -Wstrict-prototypes"
fi

if test "$enable_memcheck" = yes; then
   echo "Setting up for memory checking via mpatrol"
   CFLAGS="$CFLAGS -fcheck-memory-usage "
   LDFLAGS="$LDFLAGS -lmpatrol -lbfd -liberty "
fi

dnl Always use -Wall, even though its annoying. Like eating your vegetables.
CFLAGS="$CFLAGS -Wall"

dnl Some system-specific stuff ...
dnl Some operating systems require additional flags in order to get all
dnl the definitions that we're looking for in some system headers.

dnl Currently only linux supports gexec

dnl By default, no support for gexec
GEXEC=false;

case "$host" in
*linux*)
                metric_source="linux.c"
                AC_DEFINE(LINUX, 1, LINUX)
dnl
dnl For fsusage.c - disk usage.
dnl
                AC_DEFINE(STAT_STATVFS, 1, STAT_STATVFS)
                GEXEC=true;
                ;;
*ia64-*hpux*)		metric_source="hpux.c"
		CFLAGS="$CFLAGS -D_PSTAT64 -D_HPUX_SOURCE" 
                LIBS="-lpthread $LIBS"
                AC_DEFINE(IA64,1,IA64)
                AC_DEFINE(HPUX,1,HPUX)
                ;;
*aix*)		metric_source="aix.c"
                CFLAGS="$CFLAGS -D_ALL_SOURCE -DAIX"
		if test "$ac_cv_lib_pmapi_pm_cycles" = yes ; then
			CFLAGS="$CFLAGS -DHAVE_PMAPI" 
		else
			echo "PMAPI not detected."
			echo "For AIX 4.3, you can download PMAPI at http://alphaworks.ibm.com/tech/pmapi"
			echo "AIX 5 has PMAPI installed in bos.pmapi"
		fi
                AC_DEFINE(AIX, 1, AIX)
                ;;
*hpux*)		metric_source="hpux.c"
		CFLAGS="$CFLAGS -D_HPUX_SOURCE" 
                LIBS="-lpthread $LIBS"
                AC_DEFINE(HPUX,1,HPUX);;
*irix*)         metric_source="irix.c"
                CFLAGS="$CFLAGS -D_IRIX_SOURCE"
                AC_DEFINE(IRIX,1,IRIX);;
*osf*)	 	metric_source="osf.c"	
		CFLAGS="$CFLAGS -D_SOCKADDR_LEN" 
                AC_DEFINE(OSF,1,OSF);;
*darwin*) 	metric_source="darwin.c"	
                AC_DEFINE(DARWIN,1,DARWIN);;
*solaris*)	metric_source="solaris.c"	
                echo " *** WARNING:  Please make sure you use a 64-bit compiler, linker and *** "
                echo " *** library set if you are running a 64-bit Solaris kernel!  This    *** "
                echo " *** applies if you are running Solaris 7 or later!                   *** "
		if test "$ac_cv_prog_gcc" = yes; then
		   CFLAGS="$CFLAGS -D__EXTENSIONS__ -D_POSIX_C_SOURCE=199506L -DHAVE_STRERROR"
		else
		   CFLAGS="$CFLAGS -D__STDC__ -D_POSIX_C_SOURCE=199506L -DHAVE_STRERROR"
		fi 
                AC_DEFINE(SOLARIS,1,SOLARIS);;
*freebsd*)      metric_source="freebsd.c" 
                CFLAGS="-pthread $CFLAGS -D_REENTRANT" 
                AC_DEFINE(FREEBSD, 1, FREEBSD);; 
*cygwin*)      	metric_source="cygwin.c" 
                LIBS="$LIBS -lrpc"
		AC_DEFINE(CYGWIN,1,CYGWIN)
esac

AM_CONDITIONAL(GEXEC_SUPPORTED, $GEXEC)

AC_LINK_FILES(gmond/machines/${metric_source}, gmond/machine.c)

# Each directory appears on a line of its own (more if needed).
# The lines should be sorted in the obvious manner.
AC_OUTPUT(Makefile ganglia.spec \
	gauthd/Makefile gauthd/gauthd.init \
	gexec/Makefile gexec/gexec_server \
	gmetad/Makefile \
	gmetric/Makefile \
	gmond/Makefile \
	gmond/gstat/Makefile \
	lib/Makefile \
	libe/Makefile \
	libhttpd/Makefile \
	libunp/Makefile \
	tests/Makefile \
	web/Makefile web/conf.php \
)


echo ""
echo "-- Ganglia $VERSION --"
echo "Type \"make\" to compile."
