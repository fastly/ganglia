dnl
dnl "Copyright (c) 2001 by Matt Massie and The Regents of the University
dnl  of California.  All rights reserved."
dnl
dnl Permission to use, copy, modify, and distribute this software and its
dnl documentation for any purpose, without fee, and without written agreement is
dnl hereby granted, provided that the above copyright notice and the following
dnl two paragraphs appear in all copies of this software.
dnl 
dnl IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
dnl DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT
dnl OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
dnl CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
dnl 
dnl THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
dnl INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
dnl AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
dnl ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
dnl PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
dnl

AC_INIT(gmond/gmond.c)
AC_CONFIG_AUX_DIR(config)

AM_INIT_AUTOMAKE(ganglia-monitor-core, 2.4.1b1)

AC_CANONICAL_HOST
AM_CONFIG_HEADER(config.h)

dnl Install with /usr are the root by default
AC_PREFIX_DEFAULT(/usr)

dnl The following cpu_vendor_os string goes into config.h.
dnl
AC_DEFINE_UNQUOTED(HOST_OS, "$host_os")
AC_DEFINE_UNQUOTED(CPU_VENDOR_OS, "$host")

dnl ##################################################################
dnl Checks for programs.
dnl
AC_PROG_CC
AC_PROG_RANLIB
AM_PROG_LIBTOOL

dnl ##################################################################
dnl Special parameters
dnl

AC_ARG_ENABLE(debug,
[
 GENERAL GANGLIA OPTIONS
 ----------------------- 
  --enable-debug          turn on debugging output and compile options],
[ CFLAGS="-ggdb"
  AC_DEFINE(DEBUG, 1)],
[ CFLAGS="-O2 " 
  AC_DEFINE(DEBUG, 0)])

AC_ARG_ENABLE(gexec,
[  --enable-gexec          turn on gexec support (platform-specific) ],
AC_DEFINE(SUPPORT_GEXEC, 1), AC_DEFINE(SUPPORT_GEXEC, 0))

AC_ARG_ENABLE(pedantic,   
[  --enable-pedantic       turn on pedantic mode during compile],     
[ CFLAGS="$CFLAGS --pedantic" ],)

AC_ARG_ENABLE(memcheck,
[  --enable-memcheck       turn on memory checking during compile
                           note: requires mpatrol from
                           http://www.cbmamiga.demon.co.uk/mpatrol/],
  AC_DEFINE(MEMCHECK, 1), AC_DEFINE(MEMCHECK,0))

dnl ##################################################################
dnl Checks for libraries.
dnl The order of these tests is the *reverse* order of the libraries in
dnl the LIBS variable that is constructed: each new one gets prepended,
dnl not appended.
dnl
AC_CHECK_LIB(pthread, pthread_create)
if test "$ac_cv_lib_pthread_pthread_create" = yes ; then
   CFLAGS="$CFLAGS -D_REENTRANT"
else
   AC_CHECK_LIB(pthreads, pthread_create)
   if test "$ac_cv_lib_pthreads_pthread_create" = yes ; then
      CFLAGS="$CFLAGS -D_REENTRANT"
   fi
fi

AC_CHECK_LIB(socket, socket)
AC_CHECK_LIB(nsl, inet_addr)
AC_CHECK_LIB(kstat, kstat_open)
AC_CHECK_LIB(kvm, kvm_open)
AC_CHECK_LIB(odm, odm_initialize)
AC_CHECK_LIB(cfg, _system_configuration)
AC_CHECK_LIB(dl, dlopen)

dnl AC_CHECK_LIB(crypto, RSA_sign)
dnl if test "$ac_cv_lib_crypto_RSA_sign" = no; then
dnl    echo "$PACKAGE $VERSION requires IPv4 OpenSSL."
dnl    echo "See http://www.openssl.org/."
dnl    exit;
dnl fi


dnl ##################################################################
dnl Checks for header files.
dnl

dnl Check for stdlib.h stdarg.h string.h float.h
AC_HEADER_STDC

AC_CHECK_HEADERS(syslog.h pthread.h fcntl.h signal.h sys/time.h sys/types.h sys/stat.h sys/socket.h sys/ioctl.h netinet/in.h arpa/inet.h net/if.h netinet/tcp.h unistd.h stropts.h sys/sockio.h ctype.h errno.h netdb.h stdio.h sys/uio.h sys/wait.h sys/un.h sys/select.h sys/filio.h getopt.h) 

dnl # If we can't find a system getopt header than add getopt functions to my own library
dnl #if test "$ac_cv_header_getopt" = no; then
dnl #
dnl #   GETOPT_OBJS = "getopt_init.o getopt.o getopt1.o"
dnl #   AC_SUBST(GETOPT_OBJS)
dnl #fi


dnl ##################################################################
dnl Checks for typedefs.
dnl
dnl AC_TYPE_SIZE_T
AC_HEADER_TIME
dnl AC_SEARCH_TYPE is a custom macro in acinclude.m4
AC_SEARCH_TYPE(uchar_t,   unsigned char)
AC_SEARCH_TYPE(int8_t,    signed char)
AC_SEARCH_TYPE(uint8_t,   unsigned char)
AC_SEARCH_TYPE(int16_t,   signed short)
AC_SEARCH_TYPE(uint16_t,  unsigned short)
AC_SEARCH_TYPE(int32_t,   signed int)
AC_SEARCH_TYPE(uint32_t,  unsigned int)
AC_SEARCH_TYPE(size_t,    unsigned int)
AC_SEARCH_TYPE(ssize_t,   signed int)
AC_SEARCH_TYPE(socklen_t, unsigned int)

AC_CHECK_SIZEOF(char)
AC_CHECK_SIZEOF(short)
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(void *)

dnl ##################################################################
dnl Check for structure definitions.
dnl   

dnl ##################################################################
dnl Check the compiler characteristics
dnl
dnl Don't need this now that all data is send in XDR
AC_C_BIGENDIAN

dnl ##################################################################
dnl Checks for library functions.
dnl
dnl AC_FUNC_MEMCMP

dnl ##################################################################
dnl Check for function prototypes in headers.
dnl
AC_CHECK_FUNCS(getopt_long inet_ntop)
dnl AC_CHECK_FUNC(getopt_long)
dnl AC_CHECK_FUNC(pthread_rwlock_rdlock,
dnl   [AC_DEFINE(HAVE_PTHREAD_RWLOCK, 1)])

dnl ##################################################################
dnl Check for system services.

dnl Let's see if the system really supports IPv4.
AC_MSG_CHECKING(for IPv4 support)
AC_CACHE_VAL(ac_cv_ipv4,
AC_TRY_RUN([
#	include <sys/types.h>
#	include <sys/socket.h>
#	include <netinet/in.h>
   /* Make sure the definitions for AF_INET and struct sockaddr_in
	 * are defined, and that we can actually create an IPv4 TCP socket.
 	 */
 	main()
 	{
 		int fd;
 		struct sockaddr_in foo;
 		fd = socket(AF_INET, SOCK_STREAM, 0);
 		exit(fd >= 0 ? 0 : 1);
 	}],
 	ac_cv_ipv4=yes,
 	ac_cv_ipv4=no,
 	ac_cv_ipv4=no))
 AC_MSG_RESULT($ac_cv_ipv4)
if test $ac_cv_ipv4 = yes ; then
	AC_DEFINE(IPV4)
 	AC_DEFINE(IPv4)
fi
dnl Stop here if we don't have IPv4 support

if test $ac_cv_ipv4 = no ; then
   echo "$PACKAGE $VERSION requires IPv4 support.";
   exit;
fi

dnl Let's see if the system really supports multicasting.
dnl
AC_MSG_CHECKING(for multicast support)
AC_CACHE_VAL(ac_cv_multicast,
	AC_TRY_RUN([
#	include <sys/types.h>
#	include <sys/socket.h>
#	include <netinet/in.h>
	main()
	{
		int fd;
		unsigned char flag = 1;
		struct sockaddr_in foo;
		struct ip_mreq mreq;
		fd = socket(AF_INET, SOCK_DGRAM, 0);
		if (fd < 0) exit(1);
		if (setsockopt(fd, IPPROTO_IP, IP_MULTICAST_LOOP,
			       (void*)&flag, sizeof(flag)) < 0)
			exit(1);
		exit(0);
	}],
	ac_cv_multicast=yes,
	ac_cv_multicast=no,
	ac_cv_multicast=no))
AC_MSG_RESULT($ac_cv_multicast)
if test $ac_cv_multicast = yes ; then
	AC_DEFINE(MCAST)
fi

dnl Stop here if we don't have multicasting
dnl
if test $ac_cv_multicast = no ; then
   echo "$PACKAGE $VERSION requires multicast support.";
   exit;
fi

dnl Trying to be a little funny... heheh
AC_MSG_CHECKING(if you have beer in your frig)
AC_MSG_RESULT(yes) 

dnl ##################################################################
dnl If the compiler is gcc, enable all warnings.  Main purpose is to
dnl catch any function call where the function has not been prototyped.
dnl
dnl Add "-Wcast-qual again later"...
dnl if test "$ac_cv_prog_gcc" = yes; then
if test "$ac_cv_gcc" = yes; then
   CFLAGS="$CFLAGS -Wall -Wshadow -Wpointer-arith -Wcast-align -Wstrict-prototypes"
   if test "$enable_memcheck" = yes; then
      CFLAGS="$CFLAGS -fcheck-memory-usage "
      LDFLAGS="$LDFLAGS -lmpatrol -lbfd -liberty "
   fi
fi

dnl Some system-specific stuff ...
dnl Some operating systems require additional flags in order to get all
dnl the definitions that we're looking for in some system headers.

case "$host" in
*linux*)
   case "$host" in
      *alpha*)
        metric_source="linux-alpha.c";;
      *)
        metric_source="linux.c";;
   esac
            AC_DEFINE(LINUX);;
*ia64*)     AC_DEFINE(IA64);;
*aix*)		metric_source="aix.c"
      CFLAGS="$CFLAGS -D_ALL_SOURCE -DAIX"
      AC_DEFINE(SUPPORT_GEXEC, 0)
                AC_DEFINE(AIX);;
*hpux*)		metric_source="hpux.c"
		CFLAGS="$CFLAGS -D_HPUX_SOURCE" 
		AC_DEFINE(SUPPORT_GEXEC, 0)
                AC_DEFINE(HPUX);;
*irix*)    metric_source="irix.c"
		AC_DEFINE(SUPPORT_GEXEC, 0)
      CFLAGS="$CFLAGS -D_IRIX_SOURCE"
                AC_DEFINE(IRIX);;
*osf*)	 	metric_source="osf.c"	
		CFLAGS="$CFLAGS -D_SOCKADDR_LEN" 
                AC_DEFINE(OSF);;
*solaris*)	metric_source="solaris.c"	
                echo " *** WARNING:  Please make sure you use a 64-bit compiler, linker and *** "
                echo " *** library set if you are running a 64-bit Solaris kernel!  This    *** "
                echo " *** applies if you are running Solaris 7 or later!                   *** "
		AC_DEFINE(SUPPORT_GEXEC, 0)
		if test "$ac_cv_prog_gcc" = yes; then
		   CFLAGS="$CFLAGS -D__EXTENSIONS__ -DHAVE_STRERROR"
		else
		   CFLAGS="$CFLAGS -D__STDC__ -DHAVE_STRERROR"
		fi 
                AC_DEFINE(SOLARIS);;
dnl
dnl Why did BSD decide to do this?  Why not have a separate pthreads library?
dnl
*freebsd*)      metric_source="freebsd.c" 
                CFLAGS="-pthread $CFLAGS -D_REENTRANT" 
                AC_DEFINE(BSD);; 
*cygwin*)      	metric_source="cygwin.c" 
		AC_DEFINE(CYGWIN)
esac

AC_LINK_FILES(gmond/machines/${metric_source}, gmond/machine.c)

cd dotconf-1.0.9
./configure --prefix=`pwd`/binary --cache-file=../config.cache
cd ..

AC_OUTPUT(Makefile ganglia.spec lib/Makefile gmond/Makefile gmond/gstat/Makefile  gmetric/Makefile)

echo "-- Ganglia $VERSION --"
echo "Type \"make\" to compile."
