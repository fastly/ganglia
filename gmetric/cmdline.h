/* cmdline.h */

/* File autogenerated by gengetopt version 2.17  */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
#define CMDLINE_PARSER_PACKAGE "gmetric"
#endif

#ifndef CMDLINE_PARSER_VERSION
#define CMDLINE_PARSER_VERSION VERSION
#endif

struct gengetopt_args_info
{
  const char *help_help; /* Print help and exit help description.  */
  const char *version_help; /* Print version and exit help description.  */
  char * conf_arg;	/* The configuration file to use for finding send channels (default='/etc/ganglia/gmond.conf').  */
  char * conf_orig;	/* The configuration file to use for finding send channels original value given at command line.  */
  const char *conf_help; /* The configuration file to use for finding send channels help description.  */
  char * name_arg;	/* Name of the metric.  */
  char * name_orig;	/* Name of the metric original value given at command line.  */
  const char *name_help; /* Name of the metric help description.  */
  char * value_arg;	/* Value of the metric.  */
  char * value_orig;	/* Value of the metric original value given at command line.  */
  const char *value_help; /* Value of the metric help description.  */
  char * type_arg;	/* Either string|int8|uint8|int16|uint16|int32|uint32|float|double.  */
  char * type_orig;	/* Either string|int8|uint8|int16|uint16|int32|uint32|float|double original value given at command line.  */
  const char *type_help; /* Either string|int8|uint8|int16|uint16|int32|uint32|float|double help description.  */
  char * units_arg;	/* Unit of measure for the value e.g. Kilobytes, Celcius (default='').  */
  char * units_orig;	/* Unit of measure for the value e.g. Kilobytes, Celcius original value given at command line.  */
  const char *units_help; /* Unit of measure for the value e.g. Kilobytes, Celcius help description.  */
  char * slope_arg;	/* Either zero|positive|negative|both (default='both').  */
  char * slope_orig;	/* Either zero|positive|negative|both original value given at command line.  */
  const char *slope_help; /* Either zero|positive|negative|both help description.  */
  int tmax_arg;	/* The maximum time in seconds between gmetric calls (default='60').  */
  char * tmax_orig;	/* The maximum time in seconds between gmetric calls original value given at command line.  */
  const char *tmax_help; /* The maximum time in seconds between gmetric calls help description.  */
  int dmax_arg;	/* The lifetime in seconds of this metric (default='0').  */
  char * dmax_orig;	/* The lifetime in seconds of this metric original value given at command line.  */
  const char *dmax_help; /* The lifetime in seconds of this metric help description.  */
  char * spoof_arg;	/* IP address and name of host/device (colon separated) we are spoofing (default='').  */
  char * spoof_orig;	/* IP address and name of host/device (colon separated) we are spoofing original value given at command line.  */
  const char *spoof_help; /* IP address and name of host/device (colon separated) we are spoofing help description.  */
  const char *heartbeat_help; /* spoof a heartbeat message (use with spoof option) help description.  */
  
  int help_given ;	/* Whether help was given.  */
  int version_given ;	/* Whether version was given.  */
  int conf_given ;	/* Whether conf was given.  */
  int name_given ;	/* Whether name was given.  */
  int value_given ;	/* Whether value was given.  */
  int type_given ;	/* Whether type was given.  */
  int units_given ;	/* Whether units was given.  */
  int slope_given ;	/* Whether slope was given.  */
  int tmax_given ;	/* Whether tmax was given.  */
  int dmax_given ;	/* Whether dmax was given.  */
  int spoof_given ;	/* Whether spoof was given.  */
  int heartbeat_given ;	/* Whether heartbeat was given.  */

} ;

extern const char *gengetopt_args_info_purpose;
extern const char *gengetopt_args_info_usage;
extern const char *gengetopt_args_info_help[];

int cmdline_parser (int argc, char * const *argv,
  struct gengetopt_args_info *args_info);
int cmdline_parser2 (int argc, char * const *argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

void cmdline_parser_print_help(void);
void cmdline_parser_print_version(void);

void cmdline_parser_init (struct gengetopt_args_info *args_info);
void cmdline_parser_free (struct gengetopt_args_info *args_info);

int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
